        -:    0:Source:/mnt/c/TEME C C++/OOP/lab2-4/service_medicine.c
        -:    0:Graph:/mnt/c/TEME C C++/OOP/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/service_medicine.c.gcno
        -:    0:Data:/mnt/c/TEME C C++/OOP/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/service_medicine.c.gcda
        -:    0:Runs:1
        -:    1:#include "service_medicine.h"
        -:    2:
        -:    3:#include <assert.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/// Add a medicine in pharmacy
        -:    9:/// \param lst - MedicineList
        -:   10:/// \param code - int
        -:   11:/// \param name - char
        -:   12:/// \param concentration - float
        -:   13:/// \param stock - int
        -:   14:/// \return 1 if it is a validation error or 0 otherwise
function addMedicine called 10 returned 100% blocks executed 100%
       10:   15:int addMedicine(MedicineList *lst, int code, char *name, float concentration, int stock) {
       10:   16:    Medicine m = createMedicine(code, name, concentration, stock);
       10:   16-block  0
call    0 returned 10
        -:   17:
        -:   18:    //check if the element is valid
       10:   19:    int valid = validate(m);
call    0 returned 10
       10:   20:    if (!valid) {
branch  0 taken 1 (fallthrough)
branch  1 taken 9
        -:   21:        //free memory
        1:   22:        destroyMedicine(&m);
        1:   22-block  0
call    0 returned 1
        1:   23:        return 1;
        -:   24:    }
        -:   25:
        9:   26:    add(lst, m);
        9:   26-block  0
call    0 returned 9
        -:   27:
        9:   28:    return 0;
        -:   29:}
        -:   30:
        -:   31:/// Modify a medicine name/concentration in pharmacy
        -:   32:/// \param lst - MedicineList
        -:   33:/// \param code - int
        -:   34:/// \param name - char
        -:   35:/// \param concentration - float
        -:   36:/// \return 1 if it is a validation error or 0 otherwise
function modifyMedicine called 2 returned 100% blocks executed 100%
        2:   37:int modifyMedicine(MedicineList *lst, int code, char *name, float concentration) {
        2:   38:    Medicine m = createMedicine(code, name, concentration, 0);
        2:   38-block  0
call    0 returned 2
        -:   39:
        -:   40:    //check if the element is valid
        2:   41:    int valid = validate(m);
call    0 returned 2
        2:   42:    if (!valid) {
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   43:        //free memory
        1:   44:        destroyMedicine(&m);
        1:   44-block  0
call    0 returned 1
        1:   45:        return 1;
        -:   46:    }
        -:   47:
        1:   48:    modify(lst, m);
        1:   48-block  0
call    0 returned 1
        1:   49:    destroyMedicine(&m);
call    0 returned 1
        -:   50:
        1:   51:    return 0;
        -:   52:}
        -:   53:
        -:   54:/// Delete a medicine stock from pharmacy
        -:   55:/// \param lst - MedicineList
        -:   56:/// \param code - int
        -:   57:/// \return 1 if it is a validation error or 0 otherwise
function deleteStockMedicine called 2 returned 100% blocks executed 100%
        2:   58:int deleteStockMedicine(MedicineList *lst, int code) {
        -:   59:    //check if the element code is valid
        2:   60:    int valid_code = validate_code(code);
        2:   60-block  0
call    0 returned 2
        2:   61:    if (!valid_code)
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   62:        return 1;
        1:   62-block  0
        -:   63:
        1:   64:    deleteStock(lst, code);
        1:   64-block  0
call    0 returned 1
        -:   65:
        1:   66:    return 0;
        -:   67:}
        -:   68:
        -:   69:/// Compare two elements by attributes name and stock
        -:   70:/// \param a - ElemType
        -:   71:/// \param b - ElemType
        -:   72:/// \return 1 if a is bigger then b or 0 otherwise
function cmp called 6 returned 100% blocks executed 100%
        6:   73:int cmp(const ElemType *a, const ElemType *b) {
        6:   74:    if (strcmp(a->name, b->name) > 0) {
        6:   74-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 4
        2:   75:        return 1;
        2:   75-block  0
        -:   76:    } else {
        4:   77:        if (strcmp(a->name, b->name) == 0)
        4:   77-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        2:   78:            if (a->stock < b->stock)
        2:   78-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:   79:                return 1;
        1:   79-block  0
        -:   80:    }
        3:   81:    return 0;
        3:   81-block  0
        -:   82:}
        -:   83:
        -:   84:/// Swaps two elements
        -:   85:/// \param a - ElemType
        -:   86:/// \param b - ElemType
function swap called 3 returned 100% blocks executed 100%
        3:   87:void swap(ElemType *a, ElemType *b) {
        3:   88:    ElemType temp = *a;
        3:   89:    *a = *b;
        3:   90:    *b = temp;
        3:   91:}
        -:   92:
        -:   93:/// Bubble sort for a list using a personalised compare function
        -:   94:/// \param the_list - MedicineList
        -:   95:/// \param cmp - int
        -:   96:/// \param reverse - int
function bubble_sort called 1 returned 100% blocks executed 93%
        1:   97:void bubble_sort(MedicineList *the_list, int (*cmp)(const ElemType *, const ElemType *), int reverse) {
        1:   98:    int ok = 0;
        4:   99:    while (!ok) {
        1:   99-block  0
        4:   99-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        3:  100:        ok = 1;
        9:  101:        for (int index = 0; index < size(the_list) - 1; index++) {
        3:  101-block  0
        6:  101-block  1
        9:  101-block  2
call    0 returned 9
branch  1 taken 6
branch  2 taken 3 (fallthrough)
       6*:  102:            if (cmp(&the_list->elems[index], &the_list->elems[index + 1]) * (reverse ? -1 : 1) > 0) {
        6:  102-block  0
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    %%%%%:  102-block  1
        6:  102-block  2
        6:  102-block  3
branch  3 taken 3 (fallthrough)
branch  4 taken 3
        3:  103:                swap(&the_list->elems[index], &the_list->elems[index + 1]);
        3:  103-block  0
call    0 returned 3
        3:  104:                ok = 0;
        -:  105:            }
        -:  106:        }
        -:  107:    }
        1:  108:}
        -:  109:
        -:  110:/// Get all the medicine ordered ascending or descending
        -:  111:/// \param lst - MedicineList
        -:  112:/// \param sortType - int
        -:  113:/// \return An ordered copy of the list
function getAllMedicineOrdered called 1 returned 100% blocks executed 100%
        1:  114:MedicineList getAllMedicineOrdered(MedicineList *lst, int sortType) {
        1:  115:    MedicineList rez = createEmpty();
        1:  115-block  0
call    0 returned 1
        4:  116:    for (int step = 0; step < size(lst); step++) {
        4:  116-block  0
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  117:        ElemType m = get(lst, step);
        3:  117-block  0
call    0 returned 3
        3:  118:        add(&rez, m);
call    0 returned 3
        -:  119:    }
        -:  120:
        1:  121:    bubble_sort(&rez, cmp, sortType);
        1:  121-block  0
call    0 returned 1
        1:  122:    return rez;
        -:  123:}
        -:  124:
        -:  125:/// Get all the medicine with a higher stock than filter
        -:  126:/// \param lst - MedicineList
        -:  127:/// \param stockF - int
        -:  128:/// \return A filtered copy of the list
function getAllMedicineFilteredByStock called 1 returned 100% blocks executed 100%
        1:  129:MedicineList getAllMedicineFilteredByStock(MedicineList *lst, int stockF) {
        1:  130:    MedicineList rez = createEmpty();
        1:  130-block  0
call    0 returned 1
        4:  131:    for (int step = 0; step < size(lst); step++) {
        3:  131-block  0
        4:  131-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  132:        if (lst->elems[step].stock > stockF) {
        3:  132-block  0
branch  0 taken 2 (fallthrough)
branch  1 taken 1
        2:  133:            ElemType m = get(lst, step);
        2:  133-block  0
call    0 returned 2
        2:  134:            add(&rez, m);
call    0 returned 2
        -:  135:        }
        -:  136:    }
        1:  137:    return rez;
        1:  137-block  0
        -:  138:}
        -:  139:
        -:  140:/// Get all the medicine whose name starts with a letter
        -:  141:/// \param lst - MedicineList
        -:  142:/// \param nameF - char
        -:  143:/// \return A filtered copy of the list
function getAllMedicineFilteredByName called 1 returned 100% blocks executed 100%
        1:  144:MedicineList getAllMedicineFilteredByName(MedicineList *lst, char *nameF) {
        1:  145:    MedicineList rez = createEmpty();
        1:  145-block  0
call    0 returned 1
        4:  146:    for (int step = 0; step < size(lst); step++) {
        3:  146-block  0
        4:  146-block  1
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        3:  147:        if (lst->elems[step].name[0] == nameF[0]) {
        3:  147-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:  148:            ElemType m = get(lst, step);
        1:  148-block  0
call    0 returned 1
        1:  149:            add(&rez, m);
call    0 returned 1
        -:  150:        }
        -:  151:    }
        1:  152:    return rez;
        1:  152-block  0
        -:  153:}
        -:  154:
        -:  155:
        -:  156://tests
function testAddMedicine called 1 returned 100% blocks executed 78%
        1:  157:void testAddMedicine() {
        1:  158:    MedicineList lst = createEmpty();
        1:  158-block  0
call    0 returned 1
        -:  159:
        1:  160:    int err = addMedicine(&lst, -1, "", 0, -2);
call    0 returned 1
       1*:  161:    assert(err == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  161-block  0
call    2 never executed
        -:  162:
        1:  163:    err = addMedicine(&lst, 1, "paracetamol", 500, 20);
        1:  163-block  0
call    0 returned 1
       1*:  164:    assert(err == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  164-block  0
call    2 never executed
        1:  165:    destroy(&lst);
        1:  165-block  0
call    0 returned 1
        1:  166:}
        -:  167:
function testModifyMedicine called 1 returned 100% blocks executed 80%
        1:  168:void testModifyMedicine() {
        1:  169:    MedicineList lst = createEmpty();
        1:  169-block  0
call    0 returned 1
        1:  170:    addMedicine(&lst, 1, "paracetamol", 500, 20);
call    0 returned 1
        -:  171:
        1:  172:    int err = modifyMedicine(&lst, 1, "nurofen", 300);
call    0 returned 1
       1*:  173:    assert(err == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  173-block  0
call    2 never executed
        1:  174:    destroy(&lst);
        1:  174-block  0
call    0 returned 1
        -:  175:
        1:  176:    err = modifyMedicine(&lst, -1, "", 0);
call    0 returned 1
       1*:  177:    assert(err == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  177-block  0
call    2 never executed
        -:  178:
        -:  179:
        1:  180:}
        -:  181:
function testDeleteStockMedicine called 1 returned 100% blocks executed 80%
        1:  182:void testDeleteStockMedicine() {
        1:  183:    MedicineList lst = createEmpty();
        1:  183-block  0
call    0 returned 1
        1:  184:    addMedicine(&lst, 1, "paracetamol", 500, 20);
call    0 returned 1
        -:  185:
        1:  186:    int err = deleteStockMedicine(&lst, -1);
call    0 returned 1
       1*:  187:    assert(err == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  187-block  0
call    2 never executed
        -:  188:
        1:  189:    err = deleteStockMedicine(&lst, 1);
        1:  189-block  0
call    0 returned 1
       1*:  190:    assert(err == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    %%%%%:  190-block  0
call    2 never executed
        1:  191:    destroy(&lst);
        1:  191-block  0
call    0 returned 1
        1:  192:}
        -:  193:
function testGetAllMedicineOrdered called 1 returned 100% blocks executed 100%
        1:  194:void testGetAllMedicineOrdered() {
        1:  195:    MedicineList lst = createEmpty();
        1:  195-block  0
call    0 returned 1
        1:  196:    addMedicine(&lst, 1, "paracetamol", 500, 20);
call    0 returned 1
        1:  197:    addMedicine(&lst, 3, "aabc", 300, 2);
call    0 returned 1
        1:  198:    addMedicine(&lst, 2, "aabc", 300, 4);
call    0 returned 1
        -:  199:
        -:  200:
        1:  201:    MedicineList copy_list = getAllMedicineOrdered(&lst, 0);
call    0 returned 1
        1:  202:    destroy_copy(&copy_list);
call    0 returned 1
        1:  203:    destroy(&lst);
call    0 returned 1
        1:  204:}
        -:  205:
function testGetAllMedicineFiltered called 1 returned 100% blocks executed 88%
        1:  206:void testGetAllMedicineFiltered() {
        1:  207:    MedicineList lst = createEmpty();
        1:  207-block  0
call    0 returned 1
        1:  208:    addMedicine(&lst, 1, "paracetamol", 500, 20);
call    0 returned 1
        1:  209:    addMedicine(&lst, 3, "aabc", 300, 4);
call    0 returned 1
        1:  210:    addMedicine(&lst, 2, "nurofen", 300, 2);
call    0 returned 1
        -:  211:
        1:  212:    MedicineList list = getAllMedicineFilteredByStock(&lst, 2);
call    0 returned 1
       1*:  213:    assert(size(&list) == 2);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  213-block  0
call    3 never executed
        1:  214:    destroy_copy(&list);
        1:  214-block  0
call    0 returned 1
        -:  215:
        1:  216:    list = getAllMedicineFilteredByName(&lst, "a");
call    0 returned 1
       1*:  217:    assert(size(&list) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  217-block  0
call    3 never executed
        1:  218:    destroy_copy(&list);
        1:  218-block  0
call    0 returned 1
        -:  219:
        1:  220:    destroy(&lst);
call    0 returned 1
        1:  221:}
