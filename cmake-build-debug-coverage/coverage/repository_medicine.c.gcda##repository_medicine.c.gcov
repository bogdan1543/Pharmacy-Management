        -:    0:Source:/mnt/c/TEME C C++/OOP/lab2-4/repository_medicine.c
        -:    0:Graph:/mnt/c/TEME C C++/OOP/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/repository_medicine.c.gcno
        -:    0:Data:/mnt/c/TEME C C++/OOP/lab2-4/cmake-build-debug-coverage/CMakeFiles/lab2_4.dir/repository_medicine.c.gcda
        -:    0:Runs:1
        -:    1:#include "repository_medicine.h"
        -:    2:
        -:    3:#include <assert.h>
        -:    4:#include <stdio.h>
        -:    5:#include <string.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:/// Create an empty list
        -:   10:/// \return List
function createEmpty called 13 returned 100% blocks executed 100%
       13:   11:MedicineList createEmpty() {
        -:   12:    MedicineList lst;
       13:   13:    lst.capacity = 50;
       13:   14:    lst.elems = malloc(sizeof(Medicine) * lst.capacity);
       13:   15:    lst.length = 0;
       13:   16:    return lst;
       13:   16-block  0
        -:   17:}
        -:   18:
        -:   19:/// Deallocate memory from the list
        -:   20:/// \param lst - MedicineList
function destroy called 10 returned 100% blocks executed 100%
       10:   21:void destroy(MedicineList *lst) {
       24:   22:    for (int i = 0; i < lst->length; i++) {
       10:   22-block  0
       24:   22-block  1
branch  0 taken 14
branch  1 taken 10 (fallthrough)
       14:   23:        ElemType m = lst->elems[i];
       14:   24:        destroyMedicine(&m);
       14:   24-block  0
call    0 returned 14
        -:   25:    }
       10:   26:    lst->length = 0;
       10:   27:    free(lst->elems);
       10:   28:}
        -:   29:
        -:   30:/// Deallocate memort from a copied list
        -:   31:/// \param lst - MedicineList
function destroy_copy called 3 returned 100% blocks executed 100%
        3:   32:void destroy_copy(MedicineList *lst) {
        3:   33:    lst->length = 0;
        3:   34:    free(lst->elems);
        3:   35:}
        -:   36:
        -:   37:/// Verify if an element exists
        -:   38:/// \param lst - MedicineList
        -:   39:/// \param code - int
        -:   40:/// \return Position of the element in list or -1 if it does not exist
function elem_exists called 48 returned 100% blocks executed 100%
       48:   41:int elem_exists(MedicineList *lst, int code) {
       63:   42:    for (int i = 0; i < lst->length; i++)
       48:   42-block  0
       15:   42-block  1
       63:   42-block  2
branch  0 taken 39
branch  1 taken 24 (fallthrough)
       39:   43:        if (lst->elems[i].code == code)
       39:   43-block  0
branch  0 taken 24 (fallthrough)
branch  1 taken 15
       24:   44:            return i;
       24:   44-block  0
       24:   45:    return -1;
       24:   45-block  0
        -:   46:}
        -:   47:
        -:   48:/// Add an element to list
        -:   49:/// \param lst - MedicineList
        -:   50:/// \param el - ElemType
function add called 23 returned 100% blocks executed 100%
       23:   51:void add(MedicineList *lst, ElemType el) {
        -:   52:    //alocate a bigger capacity
       23:   53:    if (lst->capacity <= lst->length) {
       23:   53-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 22
        1:   54:        ElemType *aux = malloc(sizeof(ElemType) * (lst->capacity + 5));
        2:   55:        for (int i = 0; i < lst->length; i++) {
        1:   55-block  0
        2:   55-block  1
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        1:   56:            aux[i] = lst->elems[i];
        1:   56-block  0
        -:   57:        }
        1:   58:        free(lst->elems);
        1:   59:        lst->elems = aux;
        1:   60:        lst->capacity += 5;
        1:   60-block  0
        -:   61:    }
        -:   62:
       23:   63:    if (elem_exists(lst, el.code) != -1) {
       23:   63-block  0
call    0 returned 23
branch  1 taken 3 (fallthrough)
branch  2 taken 20
        3:   64:        if (strcmp(lst->elems[elem_exists(lst, el.code)].name, el.name) == 0 &&
        3:   64-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1
        2:   65:            lst->elems[elem_exists(lst, el.code)].concentration == el.concentration)
        2:   65-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
        1:   66:            lst->elems[elem_exists(lst, el.code)].stock += el.stock;
        1:   66-block  0
call    0 returned 1
        -:   67:        else {
        2:   68:            printf("Medicine code already exists and has other attributes");
        2:   68-block  0
call    0 returned 2
        -:   69:        }
        -:   70:    } else {
       20:   71:        lst->elems[lst->length] = el;
       20:   72:        lst->length++;
       20:   72-block  0
        -:   73:    }
       23:   74:}
        -:   75:
        -:   76:/// Modify an element from list
        -:   77:/// \param lst - MedicineList
        -:   78:/// \param el - ElemType
function modify called 3 returned 100% blocks executed 100%
        3:   79:void modify(MedicineList *lst, ElemType el) {
        3:   80:    if (elem_exists(lst, el.code) == -1)
        3:   80-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   81:        printf("Non-existent medicine!");
        1:   81-block  0
call    0 returned 1
        -:   82:    else {
        2:   83:        strcpy(lst->elems[elem_exists(lst, el.code)].name, el.name);
        2:   83-block  0
call    0 returned 2
        2:   84:        lst->elems[elem_exists(lst, el.code)].concentration = el.concentration;
call    0 returned 2
        -:   85:    }
        -:   86:
        3:   87:}
        -:   88:
        -:   89:/// Delete an element stock
        -:   90:/// \param lst - MedicineList
        -:   91:/// \param code - int
function deleteStock called 3 returned 100% blocks executed 100%
        3:   92:void deleteStock(MedicineList *lst, int code) {
        3:   93:    if (elem_exists(lst, code) == -1) {
        3:   93-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
        1:   94:        printf("Non-existent medicine!");
        1:   94-block  0
call    0 returned 1
        -:   95:    } else {
        2:   96:        lst->elems[elem_exists(lst, code)].stock = 0;
        2:   96-block  0
call    0 returned 2
        -:   97:    }
        3:   98:}
        -:   99:
        -:  100:/// Get an element from a specified position in the list
        -:  101:/// \param lst - MedicineList
        -:  102:/// \param pos - int
        -:  103:/// \return Element from position pos
function get called 18 returned 100% blocks executed 100%
       18:  104:ElemType get(MedicineList *lst, int pos) {
       18:  105:    return lst->elems[pos];
       18:  105-block  0
        -:  106:}
        -:  107:
        -:  108:/// Get the size of the list
        -:  109:/// \param lst - MedicineList
        -:  110:/// \return Number of elements in the list
function size called 29 returned 100% blocks executed 100%
       29:  111:int size(MedicineList *lst) {
       29:  112:    return lst->length;
       29:  112-block  0
        -:  113:}
        -:  114:
        -:  115:
        -:  116:// tests
function testCreateList called 1 returned 100% blocks executed 83%
        1:  117:void testCreateList() {
        1:  118:    MedicineList lst = createEmpty();
        1:  118-block  0
call    0 returned 1
       1*:  119:    assert(size(&lst) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  119-block  0
call    3 never executed
        1:  120:    destroy(&lst);
        1:  120-block  0
call    0 returned 1
        1:  121:}
        -:  122:
function testAdd called 1 returned 100% blocks executed 81%
        1:  123:void testAdd() {
        1:  124:    MedicineList lst = createEmpty();
        1:  124-block  0
call    0 returned 1
       1*:  125:    assert(size(&lst) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  125-block  0
call    3 never executed
        1:  126:    lst.capacity = 1;
        1:  127:    Medicine m = createMedicine(1, "paracetamol", 500, 20);
        1:  127-block  0
call    0 returned 1
        1:  128:    add(&lst, m);
call    0 returned 1
       1*:  129:    assert(size(&lst) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  129-block  0
call    3 never executed
        -:  130:
        1:  131:    m = createMedicine(1, "paracetamol", 500, 20);
        1:  131-block  0
call    0 returned 1
        1:  132:    add(&lst, m);
call    0 returned 1
       1*:  133:    assert(get(&lst, 0).stock == 40);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  133-block  0
call    3 never executed
        1:  134:    destroyMedicine(&m);
        1:  134-block  0
call    0 returned 1
        -:  135:
        1:  136:    m = createMedicine(1, "nurofen", 500, 20);
call    0 returned 1
        1:  137:    add(&lst, m);
call    0 returned 1
       1*:  138:    assert(get(&lst, 0).stock == 40);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  138-block  0
call    3 never executed
        1:  139:    destroyMedicine(&m);
        1:  139-block  0
call    0 returned 1
        -:  140:
        -:  141:
        1:  142:    m = createMedicine(1, "paracetamol", 300, 20);
call    0 returned 1
        1:  143:    add(&lst, m);
call    0 returned 1
       1*:  144:    assert(get(&lst, 0).stock == 40);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  144-block  0
call    3 never executed
        1:  145:    destroyMedicine(&m);
        1:  145-block  0
call    0 returned 1
        -:  146:
        -:  147:
        1:  148:    m = createMedicine(2, "nurofen", 500, 20);
call    0 returned 1
        1:  149:    add(&lst, m);
call    0 returned 1
       1*:  150:    assert(get(&lst, 1).stock == 20);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  150-block  0
call    3 never executed
       1*:  151:    assert(size(&lst) == 2);
        1:  151-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  151-block  1
call    3 never executed
        1:  152:    destroy(&lst);
        1:  152-block  0
call    0 returned 1
        1:  153:}
        -:  154:
function testModify called 1 returned 100% blocks executed 83%
        1:  155:void testModify() {
        1:  156:    MedicineList lst = createEmpty();
        1:  156-block  0
call    0 returned 1
        1:  157:    add(&lst, createMedicine(1, "paracetamol", 500, 20));
call    0 returned 1
call    1 returned 1
        1:  158:    Medicine m = createMedicine(1, "nurofen", 300, 0);
call    0 returned 1
        1:  159:    modify(&lst, m);
call    0 returned 1
       1*:  160:    assert(strcmp(get(&lst, 0).name, "nurofen") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  160-block  0
call    3 never executed
       1*:  161:    assert(get(&lst, 0).concentration == 300);
        1:  161-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  161-block  1
call    3 never executed
        1:  162:    destroyMedicine(&m);
        1:  162-block  0
call    0 returned 1
        -:  163:
        1:  164:    m = createMedicine(2, "nuro", 30, 0);
call    0 returned 1
        1:  165:    modify(&lst, m);
call    0 returned 1
       1*:  166:    assert(size(&lst) == 1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  166-block  0
call    3 never executed
       1*:  167:    assert(elem_exists(&lst, m.code) == -1);
        1:  167-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  167-block  1
call    3 never executed
        1:  168:    destroyMedicine(&m);
        1:  168-block  0
call    0 returned 1
        1:  169:    destroy(&lst);
call    0 returned 1
        -:  170:
        1:  171:}
        -:  172:
function testDeleteStock called 1 returned 100% blocks executed 81%
        1:  173:void testDeleteStock() {
        1:  174:    MedicineList lst = createEmpty();
        1:  174-block  0
call    0 returned 1
        1:  175:    add(&lst, createMedicine(1, "paracetamol", 500, 20));
call    0 returned 1
call    1 returned 1
        1:  176:    deleteStock(&lst, 2);
call    0 returned 1
       1*:  177:    assert(get(&lst, 0).stock == 20);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  177-block  0
call    3 never executed
        1:  178:    deleteStock(&lst, 1);
        1:  178-block  0
call    0 returned 1
       1*:  179:    assert(get(&lst, 0).stock == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  179-block  0
call    3 never executed
       1*:  180:    assert(size(&lst) == 1);
        1:  180-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  180-block  1
call    3 never executed
        1:  181:    Medicine m = createMedicine(2, "nuro", 30, 0);
        1:  181-block  0
call    0 returned 1
       1*:  182:    assert(elem_exists(&lst, m.code) == -1);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  182-block  0
call    3 never executed
        1:  183:    destroyMedicine(&m);
        1:  183-block  0
call    0 returned 1
        1:  184:    destroy(&lst);
call    0 returned 1
        1:  185:}
        -:  186:
function testUtilsRepo called 1 returned 100% blocks executed 79%
        1:  187:void testUtilsRepo() {
        1:  188:    MedicineList lst = createEmpty();
        1:  188-block  0
call    0 returned 1
        1:  189:    Medicine m = createMedicine(1, "paracetamol", 500, 20);
call    0 returned 1
        1:  190:    add(&lst, m);
call    0 returned 1
        1:  191:    int code = 1;
       1*:  192:    assert(elem_exists(&lst, code) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    %%%%%:  192-block  0
call    3 never executed
       1*:  193:    assert(get(&lst, elem_exists(&lst, m.code)).code == m.code);
        1:  193-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  193-block  1
call    4 never executed
       1*:  194:    assert(strcmp(get(&lst, elem_exists(&lst, m.code)).name, m.name) == 0);
        1:  194-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  194-block  1
call    4 never executed
       1*:  195:    assert(get(&lst, elem_exists(&lst, m.code)).concentration == m.concentration);
        1:  195-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  195-block  1
call    4 never executed
       1*:  196:    assert(get(&lst, elem_exists(&lst, m.code)).stock == m.stock);
        1:  196-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 0 (fallthrough)
branch  3 taken 1
    %%%%%:  196-block  1
call    4 never executed
        1:  197:    destroy(&lst);
        1:  197-block  0
call    0 returned 1
        1:  198:}
